#!/usr/bin/python2.7

from optparse import OptionParser
import logging
import re
import os
from xshop import new
from xshop import config
from xshop import test
from xshop import dockerw
import sys
from xshop import colors
from xshop import pull
def source_versions():
	c = config.Config()
	library = c.get('library')
	reg = re.compile("^"+library+"-(.+).tar.[gx]z$")
	result = []
	for f in os.listdir('source'):
		m = reg.match(f)
		if m:
			result.append(m.groups(1)[0])
	return sorted(result)

def print_general_help():
	print "XSHOP"
	print "\tAvailable Commands:"
	print "\t\tnew [library] [name]\tCreate new project"
	print "\t\tbuild_image [image_name]\tBuild xshop base image"
	print "\t\tbuild\tAttempts to build every source version"
	print "\t\ttest [source] [version(s)]\tRun tests"

def print_new_help():
	print "XSHOP - new"
	print "\txshop new [library] [project name]"
	print "\tLibrary name must reflect the name used for source tarballs"
	print "\tProject name is arbitrary"
	
def run_test(source,version):
	d = {'version':version}	
	t = test.TestCase(d,source)

	t.run()
if len(sys.argv)<2:
	print_general_help()
elif sys.argv[1] =='new':
	if len(sys.argv)<4 or len(sys.argv)>4 or sys.argv[2]=='-h' or sys.argv[2]=='--help':
		print_new_help()
	else:
		library = sys.argv[2]
		project = sys.argv[3]
		print "Building project "+project+" for library "+library+"."
		new.new_test_project(library, project)
elif sys.argv[1] =='test':
	usage = "usage: %prog test [options] [source] [version1] [version2] ...\n\tMust specify at least one version."
	parser = OptionParser(usage=usage)
	parser.add_option("-f","--force", action="store_true", dest="force", help="Force rebuild of any source files.", default=False)
	(options,args) = parser.parse_args(sys.argv[2:])
	if len(args)==0:
		c = config.Config()
		install_type = c.get('install_type')
		variables = c.get('variables')
		if install_type and isinstance(variables,dict) and len(variables.keys())>0:
			T = test.Trial(variables,install_type)
			T.run()
			f = open('output.log','w')
			f.write(str(T.results()))
			f.close()		
	elif len(args)>=2:
		source = args[0]
		versions = args[1:]
	
		if not source in ['remote','debian','source']:
			parser.print_help()
			print "Source '"+source+"' not recognized."
		else:
			for version in versions:
				run_test(source,version)

elif sys.argv[1]=='build':
	versions = source_versions()
	print "Building Versions:"
	print versions
	T = test.Trial({'version':versions}, 'source')
	T.build()
elif sys.argv[1]=='build_image':
	dockerw.build_image(sys.argv[2])

elif sys.argv[1]=='attach':
	c = sys.argv[-1]
	source = sys.argv[2]
	var = sys.argv[3:-1]
	variables = {}
	for v in var:
		v = v.split('=')
		variables[v[0]]=v[1]
	T = test.TestCase(variables,source)
	T.attach(c)
elif sys.argv[1]=='pull':
        pull.pull()
else:
	print_general_help()
	print "Command '"+sys.argv[1]+"' not recognized."
