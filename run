#!/usr/bin/python2.7

from subprocess import call
from xshop import new
from xshop import config
from xshop import test
from xshop import pull
from xshop import colors as clr
import sys
import os
import shutil
import json
import requests

if sys.argv[1] =='new':
    if len(sys.argv)<4 or len(sys.argv)>4:
        print "new [library] [project_name]"
    else:
        library = sys.argv[2]
        project = sys.argv[3]
        print "Building project "+project+" for library "+library+"."
        new.new_test_project(library, project)

if sys.argv[1] =='export':
        # Run test to output
	print clr.BOLD + "Running Default Test: " + clr.ENDC

	if call(['xshop','test']):
	        raise Exception()

	files = pull.files()

        # Copy Project
	print clr.BOLD + "Copying and Cleaning Project Folder: " + clr.ENDC,
        proj_dir = os.getcwd()
        upload_dir = os.getcwd()+'_upload'
        name = proj_dir.split('/')[-1]
        os.chdir('..')
        if shutil.copytree(proj_dir,upload_dir):
                raise Exception()
	

        devnull = open(os.devnull, 'w')
        os.chdir(upload_dir)

        # Remove Files Downloaded with XSHOP PULL,
        # remove containing folders if empty
        for k,v in files.iteritems():
            os.chdir(k)
            for f in v:
                if os.path.isfile(f):
                    os.remove(f)
            os.chdir(upload_dir)
            if os.listdir(k)==[]:
                shutil.rmtree(k)

        # Remove .DS_Stor and .pyc files
        call(['find . -name .DS_Store | xargs rm 2>&1 > /dev/null'],
                stdout=devnull,
                stderr=devnull,
                shell=True)
        call(['find . -name *.pyc | xargs rm 2>&1 > /dev/null'],
                stdout=devnull,
                stderr=devnull,
                shell=True)

        # Remove Log if its there
        if os.path.isfile('test.log'):
            os.remove('test.log')

        print clr.OKGREEN + "DONE." + clr.ENDC

	print clr.BOLD + "Compressing Project: " + clr.ENDC,
	# Run tar
        os.chdir('..')
        if call(['tar','czf','upload.tar.gz',name+"_upload"]):
            raise Exception()
        shutil.rmtree(upload_dir)
        os.chdir(proj_dir)
        print clr.OKGREEN + "DONE." + clr.ENDC

elif sys.argv[1] =='publish':
    if not os.path.isfile('upload.tar.gz'):
        print clr.FAIL+"No Project Tarfile Found."+clr.ENDC
    name = raw_input("Project Name: ")
    library = raw_input("Library: ")
    cve = raw_input("Related CVEs (optional, comma separated, no spaces: ")

    
    print clr.BOLD+"Uploading Project: \t"+clr.ENDC,
    r = requests.post("http://localhost:3000/vulnerabilities.json", 
        files={'vulnerability[archive]': open('upload.tar.gz', 'rb')}, 
        data={'vulnerability[name]':name,
            'vulnerability[library]':library,
            'vulnerability[cve]':cve})

    if r.status_code<300:
        print clr.OKGREEN+"Done!"+clr.ENDC
        print clr.BOLD+"To edit/delete this posting, please save this password: "+clr.ENDC+r.json()['password']
    else:
        print clr.FAIL+"FAILED\n"+clr.ENDC+"Please try again. The following errors were reported:"
        for e in r.json():
            print "\t"+e

elif sys.argv[1] =='test':
        variables = config.variables()
        T = test.Trial(variables)
	T.run()
	f = open('output.log','w')
	json.dump(T.results(),f)
	f.close()		

elif sys.argv[1]=='attach':
        if len(sys.argv) < 3:
            print "xshop attach [variable=value]+ [container]"
        else:
            container = sys.argv[-1]
            var = sys.argv[2:-1]
            
            variables = {}
            for v in var:
                    v = v.split('=')
                    variables[v[0]]=v[1]
            print variables
            T = test.TestCase(variables)
            T.attach(container)

elif sys.argv[1]=='build_image':
	image = sys.argv[2]
	xshop_path = os.path.dirname(os.path.realpath(test.__file__))
	dockerfilepath=xshop_path+'/defaults/contexts/%s/'%(image,)
	call(['docker','build','-t','xshop:'+image,dockerfilepath])

elif sys.argv[1]=='pull':
        if len(sys.argv)>2:
            key = sys.argv[2]
        else:
            key = None
        pull.pull(key = key)
