#!/usr/bin/python2.7

from subprocess import call
from xshop import new
from xshop import config
from xshop import test
from xshop import pull
from xshop import colors as clr
import sys
import os
import shutil
import json
import requests

if sys.argv[1] =='new':
    if len(sys.argv)<4 or len(sys.argv)>4:
        print "new [library] [project_name]"
    else:
        library = sys.argv[2]
        project = sys.argv[3]
        print "Building project "+project+" for library "+library+"."
        new.new_test_project(library, project)

if sys.argv[1] =='export':
        # Run test to output
	print clr.BOLD + "Running Default Test: " + clr.ENDC

	if call(['xshop','test']):
	        raise Exception()

        # Copy Project
	print clr.BOLD + "Copying and Cleaning Project Folder: " + clr.ENDC,
        proj_dir = os.getcwd()
        upload_dir = os.getcwd()+'_upload'
        name = proj_dir.split('/')[-1]
        os.chdir('..')
        if shutil.copytree(proj_dir,upload_dir):
                raise Exception()
	
	# Remove Src, Pkg, .DSStore,.pyc
        devnull = open(os.devnull, 'w')
        os.chdir(upload_dir)
        call(['find . -name .DS_Store | xargs rm 2>&1 > /dev/null'],
                stdout=devnull,
                stderr=devnull,
                shell=True)
        call(['find . -name *.pyc | xargs rm 2>&1 > /dev/null'],
                stdout=devnull,
                stderr=devnull,
                shell=True)

        call(['rm -rf packages/*'],shell=True)
        call(['rm -rf source/*'],shell=True)
        call(['rm','test.log']) 
        print clr.OKGREEN + "DONE." + clr.ENDC

	print clr.BOLD + "Compressing Project: " + clr.ENDC,
	# Run tar
        os.chdir('..')
        if call(['tar','czf','upload.tar.gz',name+"_upload"]):
            raise Exception()
        shutil.rmtree(upload_dir)
        os.chdir(proj_dir)
        print clr.OKGREEN + "DONE." + clr.ENDC

elif sys.argv[1] =='publish':
        name = raw_input("Project Name: ")
        library = raw_input("Library: ")
        email = raw_input("Email (optional): ")
        cve = raw_input("Related CVEs (optional, comma separated, no spaces: ")

        print clr.BOLD+"Fetching Upload Information: "+clr.ENDC,
        # Fetch upload URL
        r = requests.get('https://xshop-site.herokuapp.com/vulnerabilities/new.json')

        if not r.status_code==200:
            print clr.FAIL+"FAILED\n"+clr.ENDC+"There was an error contacting the XShop server."
            
        else:
            print clr.OKGREEN+"Done."+clr.ENDC
            data= json.loads(r.text)
       
            upload_url = data['url']
            folder = data['folder']

            if os.path.isfile('upload.tar.gz'):
                print clr.BOLD+"Uploading Project: \t"+clr.ENDC,
    
                r = requests.put(upload_url, data=open('upload.tar.gz', 'rb'))

                if r.status_code==200:
                    print clr.OKGREEN+"Done!"+clr.ENDC
                    print clr.BOLD+"Publishing Project"+clr.ENDC,

                    r = requests.post('http://xshop-site.herokuapp.com/vulnerabilities',
                        params={'vulnerability[name]':name,
                            'vulnerability[library]':library,
                            'vulnerability[cve]':cve,
                            'vulnerability[email]':email,
                            'vulnerability[folder]':folder})
                    if r.status_code==200:
                        print clr.OKGREEN+"Done!"+clr.ENDC
                    else:
                        print clr.FAIL+"FAILED\n"+clr.ENDC+"Please try again."
                    
                else:
                    print clr.OKGREEN+"FAILED\n"+clr.ENDC+"Please try again."
            
            else:
                print clr.FAIL+"No Project Tarfile Found."+clr.ENDC
             

elif sys.argv[1] =='test':
        variables = config.variables()
        T = test.Trial(variables)
	T.run()
	f = open('output.log','w')
	json.dump(T.results(),f)
	f.close()		

elif sys.argv[1]=='attach':
        if len(sys.argv) < 3:
            print "xshop attach [variable=value]+ [container]"
        else:
            container = sys.argv[-1]
            var = sys.argv[2:-1]
            
            variables = {}
            for v in var:
                    v = v.split('=')
                    variables[v[0]]=v[1]
            print variables
            T = test.TestCase(variables)
            T.attach(container)

elif sys.argv[1]=='build_image':
	image = sys.argv[2]
	xshop_path = os.path.dirname(os.path.realpath(test.__file__))
	dockerfilepath=xshop_path+'/defaults/contexts/%s/'%(image,)
	call(['docker','build','-t','xshop:'+image,dockerfilepath])

elif sys.argv[1]=='pull':
        if len(sys.argv)>2:
            key = sys.argv[2]
        else:
            key = None
        pull.pull(key = key)
